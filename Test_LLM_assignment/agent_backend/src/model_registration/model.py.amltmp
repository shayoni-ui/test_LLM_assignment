from typing import List, Optional, Dict, Any, Callable
import mlflow.pyfunc
from agents.my_agent import my_agent_function

class ChatMessage:
    def __init__(self, role: str, content: str):
        self.role = role
        self.content = content

class ChatParams:
    def __init__(self, temperature=0.7, max_tokens=1024, custom_inputs: Optional[Dict[str, Any]] = None):
        self.temperature = temperature
        self.max_tokens = max_tokens
        self.custom_inputs = custom_inputs or {}

class ChatCompletionResponse:
    def __init__(self, response: str, metadata: Optional[Dict[str, Any]] = None):
        self.response = response
        self.metadata = metadata or {}

class MyAgent(mlflow.pyfunc.PythonModel):
    def __init__(self, agent_name: str, agent_function: Callable):
        self.agent_name = agent_name
        self.agent_function = agent_function

    def _get_client_type(self, params: ChatParams) -> str:
        return params.custom_inputs.get("client_type", "unknown")

    def predict(self, context, model_input: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
        results = []
        for item in model_input:
            messages = [ChatMessage(**m) for m in item["messages"]]
            params = ChatParams(**item.get("params", {}))
            res = self.agent_function(messages=messages, params=params, verbose=True)
            results.append({"response": res.response, "metadata": res.metadata})
        return results
